<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.2">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="cm" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="handmovement" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="instruction_baseline">
      <RoutineSettingsComponent name="instruction_baseline" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instruction_baseline" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_baseline_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_baseline_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The green cursor represents the position of your hand movement.&amp;#10;&amp;#10;You must start from the starting point in the center of the screen and move towards to hit the black target point that appears.&amp;#10;&amp;#10;You should move in a straight line as fast and accurately as you can towards the target.&amp;#10;&amp;#10;Once you hit the target, return to the starting point and wait for the next target to appear.&amp;#10;&amp;#10;Click anywhere to continue..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="instruction_baseline_mouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="instruction_baseline_mouse" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="baseline">
      <RoutineSettingsComponent name="baseline" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="baseline" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_baseline" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.tools.coordinatetools import cart2pol&amp;#10;from psychopy.tools.coordinatetools import pol2cart&amp;#10;&amp;#10;# 计算欧氏距离&amp;#10;def euclidean_dist(vec1, vec2):&amp;#10;    return sqrt((vec1[0] - vec2[0])**2 + (vec1[1] - vec2[1])**2)&amp;#10;    &amp;#10;# might change depending on which computer/screen is being used&amp;#10;target_radius = 12&amp;#10;# rotation angle&amp;#10;angle = 30.0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {cart2pol} from 'psychopy/tools/coordinatetools';&amp;#10;import {pol2cart} from 'psychopy/tools/coordinatetools';&amp;#10;function euclidean_dist(vec1, vec2) {&amp;#10;    return Math.sqrt((Math.pow((vec1[0] - vec2[0]), 2) + Math.pow((vec1[1] - vec2[1]), 2)));&amp;#10;}&amp;#10;target_radius = 12;&amp;#10;angle = 30.0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;move_start = false;&amp;#10;feedback_start = false;&amp;#10;mouse_startpoint_time = new util.Clock();&amp;#10;target_show_time = new util.Clock();&amp;#10;move_start_time = new util.Clock();&amp;#10;move_end_time = new util.Clock();&amp;#10;feedback_start_time = new util.Clock();&amp;#10;mouse_startpoint_time.reset();&amp;#10;target_show_time.reset();&amp;#10;move_start_time.reset();&amp;#10;move_end_time.reset();&amp;#10;feedback_start_time.reset();&amp;#10;movement_frames = [];&amp;#10;lastPos = mouse_baseline.getPos();&amp;#10;[x_mouse, y_mouse] = mouse_baseline.getPos();&amp;#10;ring_radius = euclidean_dist([0, 0], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse);&amp;#10;[feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius);&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    ring_baseline.size = [ring_radius, ring_radius];&amp;#10;}&amp;#10;mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False&amp;#10;&amp;#10;# 初始化必要的变量和标志位&amp;#10;move_start = False&amp;#10;feedback_start = False&amp;#10;&amp;#10;mouse_startpoint_time = core.Clock()  # 用于记录mouse_startpoint_ring出现的时间&amp;#10;target_show_time = core.Clock()&amp;#10;move_start_time = core.Clock()  # 用于记录运动开始的时间&amp;#10;move_end_time = core.Clock()&amp;#10;feedback_start_time = core.Clock()&amp;#10;mouse_startpoint_time.reset()&amp;#10;target_show_time.reset()&amp;#10;move_start_time.reset()&amp;#10;move_end_time.reset()&amp;#10;feedback_start_time.reset()&amp;#10;&amp;#10;movement_frames = []  # 用于保存mouse运动的每一帧位置&amp;#10;&amp;#10;lastPos = mouse_baseline.getPos()&amp;#10;&amp;#10;# 计算ring的半径&amp;#10;x_mouse, y_mouse = mouse_baseline.getPos()&amp;#10;#ring_radius = euclidean_dist([fixation_ring.pos[0],fixation_ring.pos[1]], [x_mouse,y_mouse])&amp;#10;ring_radius = euclidean_dist([0,0], [x_mouse,y_mouse])&amp;#10;&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;&amp;#10;# feedback位置的转换&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse)&amp;#10;[feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius)&amp;#10;&amp;#10;if not move_start and not feedback_start:&amp;#10;    # 在此处设置ring的大小&amp;#10;    ring_baseline.size = (ring_radius, ring_radius)  # 设置ring的大小&amp;#10;&amp;#10;mouse_startpoint_ring_baseline.opacity = 0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# update mouse pos&amp;#10;x_mouse,y_mouse = mouse_baseline.getPos()&amp;#10;ring_radius = euclidean_dist([fixation_ring_baseline.pos[0],fixation_ring_baseline.pos[1]], [x_mouse,y_mouse])&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;# save last pos&amp;#10;thisPos = mouse_baseline.getPos()&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos)&amp;#10;lastPos = thisPos&amp;#10;# hide rings&amp;#10;fixation_ring_baseline.opacity = 0&amp;#10;ring_baseline.opacity = 0&amp;#10;mouse_startpoint_ring_baseline.opacity = 0&amp;#10;feedback_ring_baseline.opacity = 0&amp;#10;    &amp;#10;## 【before start】&amp;#10;if not move_start and not feedback_start:&amp;#10;    # see if fixation ring shows&amp;#10;    if ring_radius &lt;= 0.8:&amp;#10;        fixation_ring_baseline.opacity = 1&amp;#10;        ring_baseline.opacity = 0  &amp;#10;        mouse_startpoint_ring_baseline.opacity = 0&amp;#10;        # see if mouse_startpoint_ring shows&amp;#10;        if ring_radius &lt; 0.5:&amp;#10;            mouse_startpoint_ring_baseline.opacity = 1&amp;#10;        else:&amp;#10;            mouse_startpoint_ring_baseline.opacity = 0&amp;#10;            mouse_startpoint_time.reset()&amp;#10;    else:&amp;#10;        ring_baseline.opacity = 1&amp;#10;        fixation_ring_baseline.opacity = 0&amp;#10;        mouse_startpoint_ring_baseline.opacity = 0&amp;#10;    &amp;#10;    # 判断鼠标在原点是否停留足够的时间（2s）以致于target出现&amp;#10;    if mouse_startpoint_ring_baseline.opacity == 1 and mouse_startpoint_time.getTime() &gt;= 2:&amp;#10;        target_baseline.opacity = 1&amp;#10;        #判断movement何时开始&amp;#10;        if mouseDist &gt; 0.05:&amp;#10;            move_start = 1&amp;#10;            RT = target_show_time.getTime()&amp;#10;        else:&amp;#10;            move_start = 0&amp;#10;            move_start_time.reset()&amp;#10;    else:&amp;#10;        target_baseline.opacity = 0&amp;#10;        target_show_time.reset()&amp;#10;#    #判断movement何时开始&amp;#10;#    if target_baseline.opacity == 1 and mouseDist &gt; 0.1:&amp;#10;#        move_start = 1&amp;#10;#        RT = target_show_time.getTime()&amp;#10;#    else:&amp;#10;#        move_start = 0&amp;#10;#        move_start_time.reset()&amp;#10;&amp;#10;## move start&amp;#10;if move_start == 1:&amp;#10;    movement_frames.append(mouse_baseline.getPos())&amp;#10;    target_baseline.opacity = 0&amp;#10;    mouse_startpoint_ring_baseline.opacity = 0&amp;#10;    ring_baseline.opacity = 0&amp;#10;    # move end&amp;#10;    #if mouseDist &lt; 0.01 or move_start_time.getTime() &gt; 2:&amp;#10;    if move_start_time.getTime() &gt; 1.5:&amp;#10;        move_start = 0&amp;#10;        feedback_start = 1&amp;#10;    else:&amp;#10;        move_start = 1&amp;#10;        feedback_start = 0&amp;#10;        move_end_time.reset()&amp;#10;&amp;#10;## feedback start&amp;#10;if feedback_start == 1:&amp;#10;    if move_end_time.getTime() &gt;= 2:  # feedback delay暂时设为2s&amp;#10;        # feedback位置的转换&amp;#10;        [theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse)&amp;#10;        [feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius)&amp;#10;        feedback_ring_baseline.opacity = 1&amp;#10;        target_baseline.opacity = 1&amp;#10;    else:&amp;#10;        feedback_ring_baseline.opacity = 0&amp;#10;        target_baseline.opacity = 0&amp;#10;        feedback_start_time.reset()&amp;#10;    &amp;#10;    if feedback_ring_baseline.opacity == 1 and feedback_start_time.getTime() &gt;= 1:  # feedback duration暂时设为1s&amp;#10;        feedback_ring_baseline.opacity = 0&amp;#10;        target_baseline.opacity = 0&amp;#10;        continueRoutine = False&amp;#10;else:&amp;#10;    feedback_ring_baseline.opacity = 0&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[x_mouse, y_mouse] = mouse_baseline.getPos();&amp;#10;ring_radius = euclidean_dist([fixation_ring_baseline.pos[0], fixation_ring_baseline.pos[1]], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;thisPos = mouse_baseline.getPos();&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos);&amp;#10;lastPos = thisPos;&amp;#10;fixation_ring_baseline.opacity = 0;&amp;#10;ring_baseline.opacity = 0;&amp;#10;mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;feedback_ring_baseline.opacity = 0;&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    if ((ring_radius &lt;= 0.8)) {&amp;#10;        fixation_ring_baseline.opacity = 1;&amp;#10;        ring_baseline.opacity = 0;&amp;#10;        mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;        if ((ring_radius &lt; 0.5)) {&amp;#10;            mouse_startpoint_ring_baseline.opacity = 1;&amp;#10;        } else {&amp;#10;            mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;            mouse_startpoint_time.reset();&amp;#10;        }&amp;#10;    } else {&amp;#10;        ring_baseline.opacity = 1;&amp;#10;        fixation_ring_baseline.opacity = 0;&amp;#10;        mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;    }&amp;#10;    if (((mouse_startpoint_ring_baseline.opacity === 1) &amp;&amp; (mouse_startpoint_time.getTime() &gt;= 2))) {&amp;#10;        target_baseline.opacity = 1;&amp;#10;        if ((mouseDist &gt; 0.05)) {&amp;#10;            move_start = 1;&amp;#10;            RT = target_show_time.getTime();&amp;#10;        } else {&amp;#10;            move_start = 0;&amp;#10;            move_start_time.reset();&amp;#10;        }&amp;#10;    } else {&amp;#10;        target_baseline.opacity = 0;&amp;#10;        target_show_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((move_start === 1)) {&amp;#10;    movement_frames.push(mouse_baseline.getPos());&amp;#10;    target_baseline.opacity = 0;&amp;#10;    mouse_startpoint_ring_baseline.opacity = 0;&amp;#10;    ring_baseline.opacity = 0;&amp;#10;    if ((move_start_time.getTime() &gt; 1.5)) {&amp;#10;        move_start = 0;&amp;#10;        feedback_start = 1;&amp;#10;    } else {&amp;#10;        move_start = 1;&amp;#10;        feedback_start = 0;&amp;#10;        move_end_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((feedback_start === 1)) {&amp;#10;    if ((move_end_time.getTime() &gt;= 2)) {&amp;#10;        [theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse);&amp;#10;        [feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius);&amp;#10;        feedback_ring_baseline.opacity = 1;&amp;#10;        target_baseline.opacity = 1;&amp;#10;    } else {&amp;#10;        feedback_ring_baseline.opacity = 0;&amp;#10;        target_baseline.opacity = 0;&amp;#10;        feedback_start_time.reset();&amp;#10;    }&amp;#10;    if (((feedback_ring_baseline.opacity === 1) &amp;&amp; (feedback_start_time.getTime() &gt;= 1))) {&amp;#10;        feedback_ring_baseline.opacity = 0;&amp;#10;        target_baseline.opacity = 0;&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    feedback_ring_baseline.opacity = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;RT&quot;, RT);&amp;#10;psychoJS.experiment.addData(&quot;movement_frames&quot;, movement_frames);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('RT', RT)&amp;#10;thisExp.addData('movement_frames', movement_frames)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_baseline" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_baseline" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_baseline" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <PolygonComponent name="ring_baseline" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="none" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="50" valType="int" updates="constant" name="nVertices"/>
        <Param val="ring_baseline" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="[Ring_W, Ring_H]" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fixation_ring_baseline" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixation_ring_baseline" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="mouse_startpoint_ring_baseline" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="green" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="mouse_startpoint_ring_baseline" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[x_mouse,y_mouse]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="target_baseline" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="target_baseline" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[target_x, target_y]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_ring_baseline" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_ring_baseline" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[feedback_x, feedback_y]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="end">
      <RoutineSettingsComponent name="end" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="thanks" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instruction_rotation">
      <RoutineSettingsComponent name="instruction_rotation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instruction_rotation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_rotation_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_rotation_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Brief Rest Period&amp;#10;&amp;#10;In the next trials, the green cursor still represents your hand movements, but it will appear on the screen with some deviation.&amp;#10;&amp;#10;As before, you must try to hit the black target point with the green cursor. &amp;#10;&amp;#10;&amp;#10;Click anywhere to continue the experiment...&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="instruction_rotation_mouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="instruction_rotation_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="rotation">
      <RoutineSettingsComponent name="rotation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="rotation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_rotation" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;move_start = false;&amp;#10;feedback_start = false;&amp;#10;mouse_startpoint_time = new util.Clock();&amp;#10;target_show_time = new util.Clock();&amp;#10;move_start_time = new util.Clock();&amp;#10;move_end_time = new util.Clock();&amp;#10;feedback_start_time = new util.Clock();&amp;#10;mouse_startpoint_time.reset();&amp;#10;target_show_time.reset();&amp;#10;move_start_time.reset();&amp;#10;move_end_time.reset();&amp;#10;feedback_start_time.reset();&amp;#10;movement_frames = [];&amp;#10;lastPos = mouse_rotation.getPos();&amp;#10;[x_mouse, y_mouse] = mouse_rotation.getPos();&amp;#10;ring_radius = euclidean_dist([0, 0], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse);&amp;#10;[feedback_x, feedback_y] = pol2cart((theta_mouse - angle), target_radius);&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    ring_rotation.size = [ring_radius, ring_radius];&amp;#10;}&amp;#10;mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False&amp;#10;&amp;#10;# 初始化必要的变量和标志位&amp;#10;move_start = False&amp;#10;feedback_start = False&amp;#10;&amp;#10;mouse_startpoint_time = core.Clock()  # 用于记录mouse_startpoint_ring出现的时间&amp;#10;target_show_time = core.Clock()&amp;#10;move_start_time = core.Clock()  # 用于记录运动开始的时间&amp;#10;move_end_time = core.Clock()&amp;#10;feedback_start_time = core.Clock()&amp;#10;mouse_startpoint_time.reset()&amp;#10;target_show_time.reset()&amp;#10;move_start_time.reset()&amp;#10;move_end_time.reset()&amp;#10;feedback_start_time.reset()&amp;#10;&amp;#10;movement_frames = []  # 用于保存mouse运动的每一帧位置&amp;#10;&amp;#10;lastPos = mouse_rotation.getPos()&amp;#10;&amp;#10;# 计算ring的半径&amp;#10;x_mouse,y_mouse = mouse_rotation.getPos()&amp;#10;#ring_radius = euclidean_dist([fixation_ring.pos[0],fixation_ring.pos[1]], [x_mouse,y_mouse])&amp;#10;ring_radius = euclidean_dist([0,0], [x_mouse,y_mouse])&amp;#10;&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;# feedback位置的转换&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse)&amp;#10;[feedback_x, feedback_y] = pol2cart(theta_mouse - angle, target_radius)&amp;#10;&amp;#10;if not move_start and not feedback_start:&amp;#10;    # 在此处设置ring的大小&amp;#10;    ring_rotation.size = (ring_radius, ring_radius)  # 设置ring的大小&amp;#10;&amp;#10;mouse_startpoint_ring_rotation.opacity = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="x_mouse,y_mouse = mouse_rotation.getPos()&amp;#10;ring_radius = euclidean_dist([fixation_ring_rotation.pos[0],fixation_ring_rotation.pos[1]], [x_mouse,y_mouse])&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;&amp;#10;thisPos = mouse_rotation.getPos()&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos)&amp;#10;lastPos = thisPos&amp;#10;&amp;#10;fixation_ring_rotation.opacity = 0&amp;#10;ring_rotation.opacity = 0&amp;#10;mouse_startpoint_ring_rotation.opacity = 0&amp;#10;feedback_ring_rotation.opacity = 0&amp;#10;    &amp;#10;## 【before start】&amp;#10;if not move_start and not feedback_start:&amp;#10;    &amp;#10;    # 判断是否该出现fixation ring&amp;#10;    if ring_radius &lt;= 0.8:&amp;#10;        fixation_ring_rotation.opacity = 1&amp;#10;        ring_rotation.opacity = 0  # 隐藏ring&amp;#10;        mouse_startpoint_ring_rotation.opacity = 0&amp;#10;        # 判断是否该出现mouse_startpoint_ring&amp;#10;        if ring_radius &lt; 0.5:&amp;#10;            mouse_startpoint_ring_rotation.opacity = 1&amp;#10;        else:&amp;#10;            mouse_startpoint_ring_rotation.opacity = 0&amp;#10;            mouse_startpoint_time.reset()&amp;#10;    else:&amp;#10;        ring_rotation.opacity = 1&amp;#10;        fixation_ring_rotation.opacity = 0&amp;#10;        mouse_startpoint_ring_rotation.opacity = 0&amp;#10;    &amp;#10;    # 判断鼠标在原点是否停留足够的时间（2s）以致于target出现&amp;#10;    if mouse_startpoint_ring_rotation.opacity == 1 and mouse_startpoint_time.getTime() &gt;= 2:&amp;#10;        target_rotation.opacity = 1&amp;#10;        # 判断movement何时开始&amp;#10;        if mouseDist &gt; 0.05:&amp;#10;            move_start = 1&amp;#10;            RT = target_show_time.getTime()&amp;#10;        else:&amp;#10;            move_start = 0&amp;#10;            move_start_time.reset()&amp;#10;    else:&amp;#10;        target_rotation.opacity = 0&amp;#10;        target_show_time.reset()&amp;#10;&amp;#10;## move start&amp;#10;if move_start == 1:&amp;#10;    movement_frames.append(mouse_rotation.getPos())&amp;#10;    &amp;#10;    target_rotation.opacity = 0&amp;#10;    mouse_startpoint_ring_rotation.opacity = 0&amp;#10;    ring_rotation.opacity = 0&amp;#10;    # move end&amp;#10;    #if mouseDist &lt; 0.01 or move_start_time.getTime() &gt; 2:&amp;#10;    if move_start_time.getTime() &gt; 1.5:&amp;#10;        move_start = 0&amp;#10;        feedback_start = 1&amp;#10;    else:&amp;#10;        move_start = 1&amp;#10;        feedback_start = 0&amp;#10;        move_end_time.reset()&amp;#10;&amp;#10;## feedback start&amp;#10;if feedback_start == 1:&amp;#10;    if move_end_time.getTime() &gt;= 2:  # feedback delay暂时设为2s&amp;#10;        # feedback位置的转换&amp;#10;        [theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse)&amp;#10;        [feedback_x, feedback_y] = pol2cart(theta_mouse - angle, target_radius)&amp;#10;        feedback_ring_rotation.opacity = 1&amp;#10;        target_rotation.opacity = 1&amp;#10;    else:&amp;#10;        feedback_ring_rotation.opacity = 0&amp;#10;        target_rotation.opacity = 0&amp;#10;        feedback_start_time.reset()&amp;#10;    &amp;#10;    if feedback_ring_rotation.opacity == 1 and feedback_start_time.getTime() &gt;= 1:  # feedback duration暂时设为1s&amp;#10;        feedback_ring_rotation.opacity = 0&amp;#10;        target_rotation.opacity = 0&amp;#10;        continueRoutine = False&amp;#10;else:&amp;#10;    feedback_ring_rotation.opacity = 0&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[x_mouse, y_mouse] = mouse_rotation.getPos();&amp;#10;ring_radius = euclidean_dist([fixation_ring_rotation.pos[0], fixation_ring_rotation.pos[1]], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;thisPos = mouse_rotation.getPos();&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos);&amp;#10;lastPos = thisPos;&amp;#10;fixation_ring_rotation.opacity = 0;&amp;#10;ring_rotation.opacity = 0;&amp;#10;mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;feedback_ring_rotation.opacity = 0;&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    if ((ring_radius &lt;= 0.8)) {&amp;#10;        fixation_ring_rotation.opacity = 1;&amp;#10;        ring_rotation.opacity = 0;&amp;#10;        mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;        if ((ring_radius &lt; 0.5)) {&amp;#10;            mouse_startpoint_ring_rotation.opacity = 1;&amp;#10;        } else {&amp;#10;            mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;            mouse_startpoint_time.reset();&amp;#10;        }&amp;#10;    } else {&amp;#10;        ring_rotation.opacity = 1;&amp;#10;        fixation_ring_rotation.opacity = 0;&amp;#10;        mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;    }&amp;#10;    if (((mouse_startpoint_ring_rotation.opacity === 1) &amp;&amp; (mouse_startpoint_time.getTime() &gt;= 2))) {&amp;#10;        target_rotation.opacity = 1;&amp;#10;        if ((mouseDist &gt; 0.05)) {&amp;#10;            move_start = 1;&amp;#10;            RT = target_show_time.getTime();&amp;#10;        } else {&amp;#10;            move_start = 0;&amp;#10;            move_start_time.reset();&amp;#10;        }&amp;#10;    } else {&amp;#10;        target_rotation.opacity = 0;&amp;#10;        target_show_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((move_start === 1)) {&amp;#10;    movement_frames.push(mouse_rotation.getPos());&amp;#10;    target_rotation.opacity = 0;&amp;#10;    mouse_startpoint_ring_rotation.opacity = 0;&amp;#10;    ring_rotation.opacity = 0;&amp;#10;    if ((move_start_time.getTime() &gt; 1.5)) {&amp;#10;        move_start = 0;&amp;#10;        feedback_start = 1;&amp;#10;    } else {&amp;#10;        move_start = 1;&amp;#10;        feedback_start = 0;&amp;#10;        move_end_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((feedback_start === 1)) {&amp;#10;    if ((move_end_time.getTime() &gt;= 2)) {&amp;#10;        [theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse);&amp;#10;        [feedback_x, feedback_y] = pol2cart((theta_mouse - angle), target_radius);&amp;#10;        feedback_ring_rotation.opacity = 1;&amp;#10;        target_rotation.opacity = 1;&amp;#10;    } else {&amp;#10;        feedback_ring_rotation.opacity = 0;&amp;#10;        target_rotation.opacity = 0;&amp;#10;        feedback_start_time.reset();&amp;#10;    }&amp;#10;    if (((feedback_ring_rotation.opacity === 1) &amp;&amp; (feedback_start_time.getTime() &gt;= 1))) {&amp;#10;        feedback_ring_rotation.opacity = 0;&amp;#10;        target_rotation.opacity = 0;&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    feedback_ring_rotation.opacity = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;RT&quot;, RT);&amp;#10;psychoJS.experiment.addData(&quot;movement_frames&quot;, movement_frames);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('RT', RT)&amp;#10;thisExp.addData('movement_frames', movement_frames)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_rotation" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_rotation" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_rotation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <PolygonComponent name="ring_rotation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="none" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="50" valType="int" updates="constant" name="nVertices"/>
        <Param val="ring_rotation" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="[Ring_W, Ring_H]" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fixation_ring_rotation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixation_ring_rotation" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="mouse_startpoint_ring_rotation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="green" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="mouse_startpoint_ring_rotation" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[x_mouse, y_mouse]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="target_rotation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="target_rotation" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[target_x, target_y]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_ring_rotation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_ring_rotation" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[feedback_x, feedback_y]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="aftereffect">
      <RoutineSettingsComponent name="aftereffect" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="aftereffect" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_aftereffect" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;move_start = false;&amp;#10;feedback_start = false;&amp;#10;mouse_startpoint_time = new util.Clock();&amp;#10;target_show_time = new util.Clock();&amp;#10;move_start_time = new util.Clock();&amp;#10;move_end_time = new util.Clock();&amp;#10;feedback_start_time = new util.Clock();&amp;#10;mouse_startpoint_time.reset();&amp;#10;target_show_time.reset();&amp;#10;move_start_time.reset();&amp;#10;move_end_time.reset();&amp;#10;feedback_start_time.reset();&amp;#10;movement_frames = [];&amp;#10;lastPos = mouse_aftereffect.getPos();&amp;#10;[x_mouse, y_mouse] = mouse_aftereffect.getPos();&amp;#10;ring_radius = euclidean_dist([0, 0], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse);&amp;#10;[feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius);&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    ring_aftereffect.size = [ring_radius, ring_radius];&amp;#10;}&amp;#10;mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False&amp;#10;&amp;#10;# 初始化必要的变量和标志位&amp;#10;move_start = False&amp;#10;feedback_start = False&amp;#10;&amp;#10;mouse_startpoint_time = core.Clock()  # 用于记录mouse_startpoint_ring出现的时间&amp;#10;target_show_time = core.Clock()&amp;#10;move_start_time = core.Clock()  # 用于记录运动开始的时间&amp;#10;move_end_time = core.Clock()&amp;#10;feedback_start_time = core.Clock()&amp;#10;mouse_startpoint_time.reset()&amp;#10;target_show_time.reset()&amp;#10;move_start_time.reset()&amp;#10;move_end_time.reset()&amp;#10;feedback_start_time.reset()&amp;#10;&amp;#10;movement_frames = []  # 用于保存mouse运动的每一帧位置&amp;#10;&amp;#10;lastPos = mouse_aftereffect.getPos()&amp;#10;&amp;#10;# 计算ring的半径&amp;#10;x_mouse,y_mouse = mouse_aftereffect.getPos()&amp;#10;#ring_radius = euclidean_dist([fixation_ring.pos[0],fixation_ring.pos[1]], [x_mouse,y_mouse])&amp;#10;ring_radius = euclidean_dist([0,0], [x_mouse,y_mouse])&amp;#10;&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;# feedback位置的转换&amp;#10;[theta_mouse, rho_mouse] = cart2pol(x_mouse, y_mouse)&amp;#10;[feedback_x, feedback_y] = pol2cart(theta_mouse, target_radius)&amp;#10;&amp;#10;if not move_start and not feedback_start:&amp;#10;    # 在此处设置ring的大小&amp;#10;    ring_aftereffect.size = (ring_radius, ring_radius)  # 设置ring的大小&amp;#10;&amp;#10;mouse_startpoint_ring_aftereffect.opacity = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="x_mouse,y_mouse = mouse_aftereffect.getPos()&amp;#10;ring_radius = euclidean_dist([fixation_ring_aftereffect.pos[0],fixation_ring_aftereffect.pos[1]], [x_mouse,y_mouse])&amp;#10;Ring_W = ring_radius&amp;#10;Ring_H = ring_radius&amp;#10;&amp;#10;thisPos = mouse_aftereffect.getPos()&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos)&amp;#10;lastPos = thisPos&amp;#10;&amp;#10;fixation_ring_aftereffect.opacity = 0&amp;#10;ring_aftereffect.opacity = 0&amp;#10;mouse_startpoint_ring_aftereffect.opacity = 0&amp;#10;feedback_ring_aftereffect.opacity = 0&amp;#10;    &amp;#10;## 【before start】&amp;#10;if not move_start and not feedback_start:&amp;#10;    &amp;#10;    # 判断是否该出现fixation ring&amp;#10;    if ring_radius &lt;= 0.8:&amp;#10;        fixation_ring_aftereffect.opacity = 1&amp;#10;        ring_aftereffect.opacity = 0  # 隐藏ring&amp;#10;        mouse_startpoint_ring_aftereffect.opacity = 0&amp;#10;        # 判断是否该出现mouse_startpoint_ring&amp;#10;        if ring_radius &lt; 0.5:&amp;#10;            mouse_startpoint_ring_aftereffect.opacity = 1&amp;#10;        else:&amp;#10;            mouse_startpoint_ring_aftereffect.opacity = 0&amp;#10;            mouse_startpoint_time.reset()&amp;#10;    else:&amp;#10;        ring_aftereffect.opacity = 1&amp;#10;        fixation_ring_aftereffect.opacity = 0&amp;#10;        mouse_startpoint_ring_aftereffect.opacity = 0&amp;#10;    &amp;#10;    # 判断鼠标在原点是否停留足够的时间（2s）以致于target出现&amp;#10;    if mouse_startpoint_ring_aftereffect.opacity == 1 and mouse_startpoint_time.getTime() &gt;= 2:&amp;#10;        target_aftereffect.opacity = 1&amp;#10;    else:&amp;#10;        target_aftereffect.opacity = 0&amp;#10;        target_show_time.reset()&amp;#10;    #判断movement何时开始&amp;#10;    if target_aftereffect.opacity == 1 and mouseDist &gt; 0.05:&amp;#10;        move_start = 1&amp;#10;        RT = target_show_time.getTime()&amp;#10;    else:&amp;#10;        move_start = 0&amp;#10;        move_start_time.reset()&amp;#10;&amp;#10;## move start&amp;#10;if move_start == 1:&amp;#10;    movement_frames.append(mouse_aftereffect.getPos())&amp;#10;    &amp;#10;    target_aftereffect.opacity = 0&amp;#10;    mouse_startpoint_ring_aftereffect.opacity = 0&amp;#10;    ring_aftereffect.opacity = 0&amp;#10;    # move end&amp;#10;    #if mouseDist &lt; 0.01 or move_start_time.getTime() &gt; 2:&amp;#10;    if move_start_time.getTime() &gt; 1.5:&amp;#10;        move_start = 0&amp;#10;        feedback_start = 1&amp;#10;    else:&amp;#10;        move_start = 1&amp;#10;        feedback_start = 0&amp;#10;        move_end_time.reset()&amp;#10;&amp;#10;## feedback start&amp;#10;if feedback_start == 1:&amp;#10;    if move_end_time.getTime() &gt;= 2:  # feedback delay暂时设为2s&amp;#10;        target_aftereffect.opacity = 1&amp;#10;    else:&amp;#10;        feedback_ring_aftereffect.opacity = 0&amp;#10;        target_aftereffect.opacity = 0&amp;#10;        feedback_start_time.reset()&amp;#10;    if target_aftereffect.opacity == 1 and feedback_start_time.getTime() &gt;= 1:  # feedback duration暂时设为1s&amp;#10;        feedback_ring_aftereffect.opacity = 0&amp;#10;        target_aftereffect.opacity = 0&amp;#10;        continueRoutine = False&amp;#10;else:&amp;#10;    feedback_ring_aftereffect.opacity = 0&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="[x_mouse, y_mouse] = mouse_aftereffect.getPos();&amp;#10;ring_radius = euclidean_dist([fixation_ring_aftereffect.pos[0], fixation_ring_aftereffect.pos[1]], [x_mouse, y_mouse]);&amp;#10;Ring_W = ring_radius;&amp;#10;Ring_H = ring_radius;&amp;#10;thisPos = mouse_aftereffect.getPos();&amp;#10;mouseDist = euclidean_dist(lastPos, thisPos);&amp;#10;lastPos = thisPos;&amp;#10;fixation_ring_aftereffect.opacity = 0;&amp;#10;ring_aftereffect.opacity = 0;&amp;#10;mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;feedback_ring_aftereffect.opacity = 0;&amp;#10;if (((! move_start) &amp;&amp; (! feedback_start))) {&amp;#10;    if ((ring_radius &lt;= 0.8)) {&amp;#10;        fixation_ring_aftereffect.opacity = 1;&amp;#10;        ring_aftereffect.opacity = 0;&amp;#10;        mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;        if ((ring_radius &lt; 0.5)) {&amp;#10;            mouse_startpoint_ring_aftereffect.opacity = 1;&amp;#10;        } else {&amp;#10;            mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;            mouse_startpoint_time.reset();&amp;#10;        }&amp;#10;    } else {&amp;#10;        ring_aftereffect.opacity = 1;&amp;#10;        fixation_ring_aftereffect.opacity = 0;&amp;#10;        mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;    }&amp;#10;    if (((mouse_startpoint_ring_aftereffect.opacity === 1) &amp;&amp; (mouse_startpoint_time.getTime() &gt;= 2))) {&amp;#10;        target_aftereffect.opacity = 1;&amp;#10;    } else {&amp;#10;        target_aftereffect.opacity = 0;&amp;#10;        target_show_time.reset();&amp;#10;    }&amp;#10;    if (((target_aftereffect.opacity === 1) &amp;&amp; (mouseDist &gt; 0.05))) {&amp;#10;        move_start = 1;&amp;#10;        RT = target_show_time.getTime();&amp;#10;    } else {&amp;#10;        move_start = 0;&amp;#10;        move_start_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((move_start === 1)) {&amp;#10;    movement_frames.push(mouse_aftereffect.getPos());&amp;#10;    target_aftereffect.opacity = 0;&amp;#10;    mouse_startpoint_ring_aftereffect.opacity = 0;&amp;#10;    ring_aftereffect.opacity = 0;&amp;#10;    if ((move_start_time.getTime() &gt; 1.5)) {&amp;#10;        move_start = 0;&amp;#10;        feedback_start = 1;&amp;#10;    } else {&amp;#10;        move_start = 1;&amp;#10;        feedback_start = 0;&amp;#10;        move_end_time.reset();&amp;#10;    }&amp;#10;}&amp;#10;if ((feedback_start === 1)) {&amp;#10;    if ((move_end_time.getTime() &gt;= 2)) {&amp;#10;        target_aftereffect.opacity = 1;&amp;#10;    } else {&amp;#10;        feedback_ring_aftereffect.opacity = 0;&amp;#10;        target_aftereffect.opacity = 0;&amp;#10;        feedback_start_time.reset();&amp;#10;    }&amp;#10;    if (((target_aftereffect.opacity === 1) &amp;&amp; (feedback_start_time.getTime() &gt;= 1))) {&amp;#10;        feedback_ring_aftereffect.opacity = 0;&amp;#10;        target_aftereffect.opacity = 0;&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    feedback_ring_aftereffect.opacity = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;RT&quot;, RT);&amp;#10;psychoJS.experiment.addData(&quot;movement_frames&quot;, movement_frames);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('RT', RT)&amp;#10;thisExp.addData('movement_frames', movement_frames)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_aftereffect" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_aftereffect" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <PolygonComponent name="ring_aftereffect" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="none" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="50" valType="int" updates="constant" name="nVertices"/>
        <Param val="ring_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="[Ring_W, Ring_H]" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="fixation_ring_aftereffect" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixation_ring_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.8, 0.8)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="mouse_startpoint_ring_aftereffect" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="green" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="mouse_startpoint_ring_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[x_mouse, y_mouse]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="target_aftereffect" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="target_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[target_x, target_y]" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_ring_aftereffect" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="36" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_ring_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[feedback_x, feedback_y]" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="instruction_aftereffect">
      <RoutineSettingsComponent name="instruction_aftereffect" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instruction_aftereffect" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_aftereffect_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_aftereffect_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="End of Cursor Movement Phase&amp;#10;&amp;#10;&amp;#10;You need to move to target points directly with your hand, without using any strategy.&amp;#10;&amp;#10;However, there will be no cursor to indicate the position of your hand movement in the next trials.&amp;#10;&amp;#10;Click anywhere to continue the experiment...&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="instruction_aftereffect_mouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="instruction_aftereffect_mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instruction_baseline"/>
    <LoopInitiator loopType="TrialHandler" name="baseline_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'target_x': 3, 'target_y': 5, 'rotation': 0}, {'target_x': -3, 'target_y': -5, 'rotation': 0}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_baseline.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="baseline_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="baseline"/>
    <LoopTerminator name="baseline_trials"/>
    <Routine name="instruction_rotation"/>
    <LoopInitiator loopType="TrialHandler" name="rotation_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'target_x': 3, 'target_y': 5, 'rotation': 1}, {'target_x': -3, 'target_y': -5, 'rotation': 1}, {'target_x': 3, 'target_y': 5, 'rotation': 1}, {'target_x': -3, 'target_y': -5, 'rotation': 1}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_rotation.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="rotation_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="rotation"/>
    <LoopTerminator name="rotation_trials"/>
    <Routine name="instruction_aftereffect"/>
    <LoopInitiator loopType="TrialHandler" name="aftereffect_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'target_x': 3, 'target_y': 5, 'aftereffect': 1}, {'target_x': -3, 'target_y': -5, 'aftereffect': 1}, {'target_x': 3, 'target_y': 5, 'aftereffect': 1}, {'target_x': -3, 'target_y': -5, 'aftereffect': 1}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_aftereffect.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="aftereffect_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="aftereffect"/>
    <LoopTerminator name="aftereffect_trials"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
